// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/stream_fetch_helper.go

// Package mock_internal is a generated GoMock package.
package mock_internal

import (
	gomock "github.com/golang/mock/gomock"
	storage "github.com/wal-g/storages/storage"
	reflect "reflect"
	time "time"
)

// MockLogFetchSettings is a mock of LogFetchSettings interface
type MockLogFetchSettings struct {
	ctrl     *gomock.Controller
	recorder *MockLogFetchSettingsMockRecorder
}

// MockLogFetchSettingsMockRecorder is the mock recorder for MockLogFetchSettings
type MockLogFetchSettingsMockRecorder struct {
	mock *MockLogFetchSettings
}

// NewMockLogFetchSettings creates a new mock instance
func NewMockLogFetchSettings(ctrl *gomock.Controller) *MockLogFetchSettings {
	mock := &MockLogFetchSettings{ctrl: ctrl}
	mock.recorder = &MockLogFetchSettingsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogFetchSettings) EXPECT() *MockLogFetchSettingsMockRecorder {
	return m.recorder
}

// GetEndTS mocks base method
func (m *MockLogFetchSettings) GetEndTS() (*time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndTS")
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEndTS indicates an expected call of GetEndTS
func (mr *MockLogFetchSettingsMockRecorder) GetEndTS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndTS", reflect.TypeOf((*MockLogFetchSettings)(nil).GetEndTS))
}

// GetDestFolderPath mocks base method
func (m *MockLogFetchSettings) GetDestFolderPath() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDestFolderPath")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDestFolderPath indicates an expected call of GetDestFolderPath
func (mr *MockLogFetchSettingsMockRecorder) GetDestFolderPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDestFolderPath", reflect.TypeOf((*MockLogFetchSettings)(nil).GetDestFolderPath))
}

// GetLogFolderPath mocks base method
func (m *MockLogFetchSettings) GetLogFolderPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogFolderPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLogFolderPath indicates an expected call of GetLogFolderPath
func (mr *MockLogFetchSettingsMockRecorder) GetLogFolderPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogFolderPath", reflect.TypeOf((*MockLogFetchSettings)(nil).GetLogFolderPath))
}

// MockLogFetchHandlers is a mock of LogFetchHandlers interface
type MockLogFetchHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockLogFetchHandlersMockRecorder
}

// MockLogFetchHandlersMockRecorder is the mock recorder for MockLogFetchHandlers
type MockLogFetchHandlersMockRecorder struct {
	mock *MockLogFetchHandlers
}

// NewMockLogFetchHandlers creates a new mock instance
func NewMockLogFetchHandlers(ctrl *gomock.Controller) *MockLogFetchHandlers {
	mock := &MockLogFetchHandlers{ctrl: ctrl}
	mock.recorder = &MockLogFetchHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogFetchHandlers) EXPECT() *MockLogFetchHandlersMockRecorder {
	return m.recorder
}

// GetLogFilePath mocks base method
func (m *MockLogFetchHandlers) GetLogFilePath(pathToLog string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogFilePath", pathToLog)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogFilePath indicates an expected call of GetLogFilePath
func (mr *MockLogFetchHandlersMockRecorder) GetLogFilePath(pathToLog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogFilePath", reflect.TypeOf((*MockLogFetchHandlers)(nil).GetLogFilePath), pathToLog)
}

// ShouldBeAborted mocks base method
func (m *MockLogFetchHandlers) ShouldBeAborted(pathToLog string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldBeAborted", pathToLog)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShouldBeAborted indicates an expected call of ShouldBeAborted
func (mr *MockLogFetchHandlersMockRecorder) ShouldBeAborted(pathToLog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldBeAborted", reflect.TypeOf((*MockLogFetchHandlers)(nil).ShouldBeAborted), pathToLog)
}

// DownloadLogTo mocks base method
func (m *MockLogFetchHandlers) DownloadLogTo(logFolder storage.Folder, logName, dstLogFilePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadLogTo", logFolder, logName, dstLogFilePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadLogTo indicates an expected call of DownloadLogTo
func (mr *MockLogFetchHandlersMockRecorder) DownloadLogTo(logFolder, logName, dstLogFilePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadLogTo", reflect.TypeOf((*MockLogFetchHandlers)(nil).DownloadLogTo), logFolder, logName, dstLogFilePath)
}

// HandleAbortFetch mocks base method
func (m *MockLogFetchHandlers) HandleAbortFetch(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleAbortFetch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleAbortFetch indicates an expected call of HandleAbortFetch
func (mr *MockLogFetchHandlersMockRecorder) HandleAbortFetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleAbortFetch", reflect.TypeOf((*MockLogFetchHandlers)(nil).HandleAbortFetch), arg0)
}


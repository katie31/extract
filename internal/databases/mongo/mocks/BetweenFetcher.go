// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	oplog "github.com/wal-g/wal-g/internal/databases/mongo/oplog"

	sync "sync"
)

// BetweenFetcher is an autogenerated mock type for the BetweenFetcher type
type BetweenFetcher struct {
	mock.Mock
}

// OplogBetween provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *BetweenFetcher) OplogBetween(_a0 context.Context, _a1 oplog.Timestamp, _a2 oplog.Timestamp, _a3 *sync.WaitGroup) (chan oplog.Record, chan error, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 chan oplog.Record
	if rf, ok := ret.Get(0).(func(context.Context, oplog.Timestamp, oplog.Timestamp, *sync.WaitGroup) chan oplog.Record); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan oplog.Record)
		}
	}

	var r1 chan error
	if rf, ok := ret.Get(1).(func(context.Context, oplog.Timestamp, oplog.Timestamp, *sync.WaitGroup) chan error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(chan error)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, oplog.Timestamp, oplog.Timestamp, *sync.WaitGroup) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
